<animated-hero class="block hero relative py-10 sm:py-20 overflow-hidden">
    <div class="container max-w-[720px] relative z-2">
        <slot/>
    </div>
</animated-hero>

<style>
    .hero {
        isolation: isolate;
        background: linear-gradient(180deg, #FFFFFB 0%, #E4F7C7 100%);
    }
    .hero :global(.slice) {
        position: absolute;
        top: 0;
        bottom: 0;
        z-index: -1;
    }
</style>

<script>
  // Define the behaviour for our new type of HTML element.
  class AnimatedHero extends HTMLElement {
    connectedCallback() {
      for (let i = 0; i < 5; i++) {
        const slice = document.createElement('div');
        const gradientRate = 50 * Math.random() + 50;
        const width = 100/3 * Math.random() + 10;
        const duration = (5000 * Math.random() + 5000) / (1500 / window.innerWidth);
        const initialPosition = 100 * Math.random();
        const loopPosition = 100 * Math.random() - 50;
        slice.classList.add('slice');
        slice.classList.add('pointer-events-none');
        slice.style.setProperty('background-image', `linear-gradient(180deg, #FFFFFB 0%, #E4F7C7 ${gradientRate.toFixed(2)}%)`)
        slice.style.setProperty('width', `${width}%`);
        slice.style.setProperty('left', `${initialPosition.toFixed(2)}%`);
        slice.animate([{
          transform: `translateX(${loopPosition.toFixed(2)}vw)`
        },{
          transform: `translateX(0vw)`
        }
        ], {
          duration: duration,
          easing: 'ease-in-out',
          direction: 'alternate',
          iterations: Infinity,
        })
        this.appendChild(slice);
      }
    }
  }

  // Tell the browser to use our AstroHeart class for <astro-heart> elements.
  customElements.define('animated-hero', AnimatedHero);
</script>
